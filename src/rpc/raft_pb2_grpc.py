# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc.raft_pb2 as raft__pb2


class RaftStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AppendEntries = channel.unary_unary(
                '/raft.Raft/AppendEntries',
                request_serializer=raft__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=raft__pb2.AppendEntriesReply.FromString,
                )
        self.RequestVote = channel.unary_unary(
                '/raft.Raft/RequestVote',
                request_serializer=raft__pb2.RequestVoteRequest.SerializeToString,
                response_deserializer=raft__pb2.RequestVoteReply.FromString,
                )
        self.GetCommittedCmd = channel.unary_unary(
                '/raft.Raft/GetCommittedCmd',
                request_serializer=raft__pb2.GetCommittedCmdRequest.SerializeToString,
                response_deserializer=raft__pb2.GetCommittedCmdReply.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/raft.Raft/GetStatus',
                request_serializer=raft__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=raft__pb2.GetStatusReply.FromString,
                )
        self.NewCommand = channel.unary_unary(
                '/raft.Raft/NewCommand',
                request_serializer=raft__pb2.NewCommandRequest.SerializeToString,
                response_deserializer=raft__pb2.NewCommandReply.FromString,
                )


class RaftServicer(object):
    """The greeting service definition.
    """

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommittedCmd(self, request, context):
        """GetCommittedCmd -- called (only) by the Controller.  This method provides an input argument
        `index`.  If the Raft peer has a log entry at the given `index`, and that log entry has been
        committed (per the Raft algorithm), then the command stored in the log entry should be returned
        to the Controller.  otherwise, the Raft peer should return the value 0, which is not a valid
        command number and indicates that no committed log entry exists at that index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=raft__pb2.AppendEntriesRequest.FromString,
                    response_serializer=raft__pb2.AppendEntriesReply.SerializeToString,
            ),
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=raft__pb2.RequestVoteRequest.FromString,
                    response_serializer=raft__pb2.RequestVoteReply.SerializeToString,
            ),
            'GetCommittedCmd': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommittedCmd,
                    request_deserializer=raft__pb2.GetCommittedCmdRequest.FromString,
                    response_serializer=raft__pb2.GetCommittedCmdReply.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=raft__pb2.GetStatusRequest.FromString,
                    response_serializer=raft__pb2.GetStatusReply.SerializeToString,
            ),
            'NewCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.NewCommand,
                    request_deserializer=raft__pb2.NewCommandRequest.FromString,
                    response_serializer=raft__pb2.NewCommandReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raft.Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """The greeting service definition.
    """

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.Raft/AppendEntries',
            raft__pb2.AppendEntriesRequest.SerializeToString,
            raft__pb2.AppendEntriesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.Raft/RequestVote',
            raft__pb2.RequestVoteRequest.SerializeToString,
            raft__pb2.RequestVoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommittedCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.Raft/GetCommittedCmd',
            raft__pb2.GetCommittedCmdRequest.SerializeToString,
            raft__pb2.GetCommittedCmdReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.Raft/GetStatus',
            raft__pb2.GetStatusRequest.SerializeToString,
            raft__pb2.GetStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.Raft/NewCommand',
            raft__pb2.NewCommandRequest.SerializeToString,
            raft__pb2.NewCommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
